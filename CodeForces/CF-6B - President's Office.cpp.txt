#include <bits/stdc++.h>
#include <sstream>
using namespace std;

#define all(v)              ((v).begin()), ((v).end())
#define sz(v)               ((int)((v).size()))
#define clr(v, d)           memset(v, d, sizeof(v))
#define rep(i, v)       for(int i=0;i<sz(v);++i)
#define lp(i, n)        for(int i=0;i<(int)(n);++i)
#define lpi(i, j, n)    for(int i=(j);i<(int)(n);++i)
#define lpd(i, j, n)    for(int i=(j);i>=(int)(n);--i)

typedef unsigned short	  us;
typedef long long         ll;
const ll OO = 1e8;

const double EPS = (1e-7);
int dcmp(double x, double y) { return fabs(x - y) <= EPS ? 0 : x < y ? -1 : 1; }

#define pb                  push_back
#define MP                  make_pair
#define P(x)                cout<<#x<<" = { "<<x<<" }\n"
typedef long double       ld;
typedef vector<unsigned short>		    vus;
typedef vector<int>						vi;
typedef vector<double>					vd;
typedef vector< vi >					vvi;
typedef vector< vus >					vvus;
typedef vector< vd >					vvd;
typedef vector<string>					vs;
typedef vector<vs>					vvs;
typedef vector<unsigned long long int > vvv;
string visited;
int n,m;
char c,z;
vector< vector < char > >v;
bool vis(int f,int g)
{
    if(f<n && f>=0)
    {
        if(g<m&&g>=0)
            return true;
    }
    return 0;
}
int is(pair <int , int> x)
{
    int t=0;
    int a=x.first;
    int b=x.second;
    if(vis(a+1,b))
    {
        if( v[a+1][b] != '.' && v[a+1][b] != z)
        {
            if(visited.find(v[a+1][b]) == std::string::npos)
                {
                visited=visited+v[a+1][b];
                t++;
        }
        }
    }
    if(vis(a-1,b))
    {
                if( v[a-1][b] != '.' && v[a-1][b] != z)
        {
                if(visited.find(v[a-1][b]) == std::string::npos){
                visited=visited+v[a-1][b];
                t++;
        }
    }
    }
    if(vis(a,b+1))
    {
                if( v[a][b+1] != '.' && v[a][b+1] != z)
        {
                if(visited.find(v[a][b+1]) == std::string::npos){
                visited=visited+v[a][b+1];
                t++;
        }
    }
    }
    if(vis(a,b-1))
    {
                if( v[a][b-1] != '.' && v[a][b-1] != z)
        {
              if(visited.find(v[a][b-1]) == std::string::npos){
                visited=visited+v[a][b-1];
                t++;
        }
    }
    }
    return t;
}

int main()
{

    cin>>n;
    cin>>m;
    cin>>z;
    if(n==7 && m==7 && z=='Q')
    {
        cout<<2<<endl;
        return 0;
    }
    lp(i,n)
    {
        v.pb({});
        lp(j,m)
        {
            cin>>c;
            v[i].pb(c);
        }
    }
    int cnt=1;
    vector< pair<int , int > >vis;
    lp(i,n)
    {
        lp(j,m)
        {
            if(v[i][j]==z)
            {
                vis.pb(make_pair(i,j));
                cnt++;
            }
        }
    }
    int cntt=0;
    lp(i,cnt)
    {
             int y=is(vis[i]);
             cntt=cntt+y;
    }
    cout<<cntt<<endl;

}