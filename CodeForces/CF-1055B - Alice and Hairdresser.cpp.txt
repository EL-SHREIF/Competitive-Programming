#include <bits/stdc++.h>
#include <sstream>
using namespace std;

#define all(v)              ((v).begin()), ((v).end())
#define sz(v)               ((int)((v).size()))
#define clr(v, d)           memset(v, d, sizeof(v))
#define rep(i, v)       for(int i=0;i<sz(v);++i)
#define lp(i, n)        for(int i=0;i<(int)(n);++i)
#define lpi(i, j, n)    for(int i=(j);i<(int)(n);++i)
#define lpd(i, j, n)    for(int i=(j);i>=(int)(n);--i)

typedef unsigned short	  us;
typedef long long         ll;
const ll OO = 1e8;

const double EPS = (1e-7);
int dcmp(double x, double y) { return fabs(x - y) <= EPS ? 0 : x < y ? -1 : 1; }

#define pb                  push_back
#define MP                  make_pair
#define P(x)                cout<<#x<<" = { "<<x<<" }\n"
typedef long double       ld;
typedef vector<unsigned short>		    vus;
typedef vector<int>						vi;
typedef vector<double>					vd;
typedef vector< vi >					vvi;
typedef vector< vus >					vvus;
typedef vector< vd >					vvd;
typedef vector<string>					vs;
typedef vector<vs>					vvs;
typedef vector<unsigned long long int > vvv;

//ofstream cout;
//cout.open("out.txt");


int main()
{
    ios_base::sync_with_stdio(0);
    cin.tie();
    cout.tie();
    unsigned int n,m,l;
    cin>>n>>m>>l;
    vector <unsigned int > hair(n);
    vector <bool> x(n);
    unsigned int swing =0;
    lp(i,n)
    {
        cin>>hair[i];
        if(hair[i]>l)
        {
            x[i]=1;
            if( i== 0) {
               swing++;
            }
            else{
                if(x[i-1]==0)
                    swing++;
            }
        }
        else
            x[i]=0;
    }
    lp(i,m)
    {
        int t;
        cin>>t;
        if(t==0)
        {
            cout<<swing<<endl;
        } else{
            int p,d;
            cin>>p>>d;
            p--;
            hair[p]=hair[p]+d;
            if(hair[p]>l && (x[p]!=1) )
            {
                bool old=x[p];
                x[p]=1;
                if(p==0)
                {
                    if(x[p+1]==0)
                    {
                        swing++;
                    }
                }
                else if(p == (n-1))
                {
                    if(x[p-1]==0)
                    {
                        swing++;
                    }
                }
                else{
                    if(x[p-1]==1 && x[p+1]==1)
                    {
                        if(old==0)
                            swing--;
                    }
                    if(x[p-1]==0 && x[p+1]==0)
                    {
                        swing++;
                    }
                }
            }
        }
    }
    return 0;
}

